from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from crud_functions import get_all_products, is_included, add_user

api = '***'

bot = Bot(token=api)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –º–µ–Ω—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
kb = ReplyKeyboardMarkup(resize_keyboard=True)
button11 = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button22 = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button33 = KeyboardButton(text='–ö—É–ø–∏—Ç—å')
button44 = KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')  # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
kb.row(button11, button22)
kb.add(button33, button44)

@dp.message_handler(commands=['start'])
async def start_cmd(message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.\n'
                         '–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–∞–∂–º–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å".\n'
                         '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".\n'
                         '–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ - "–ö—É–ø–∏—Ç—å".\n'
                         '–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è - "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è".', reply_markup=kb)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()
    balance = State()

# –í—ã–≤–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):')
    await RegistrationState.username.set()

# –î–∞–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ strip()
# –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
# –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
@dp.message_handler(state=RegistrationState.username)
async def set_username(message, state):
    username = message.text.strip()
    if is_included(username):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:')
    else:
        await state.update_data(username=username) # –í–í–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:')
        await RegistrationState.email.set()

# –í–≤–æ–¥ email
@dp.message_handler(state=RegistrationState.email)
async def set_email(message, state):
    email = message.text.strip()
    await state.update_data(email=email)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await RegistrationState.age.set()

# –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message_handler(state=RegistrationState.age)
async def set_age(message, state):
    age = message.text.strip()
    await state.update_data(age=age)
    # –ó–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
    data = await state.get_data()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Ñ–∞–π–ª–∞ crud_functions)
    add_user(data['username'], data['email'], data['age'])
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await state.finish()

# –í—ã–≤–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –º–µ–Ω—é. –î–æ–±–∞–≤–ª–µ–Ω–∞ info –æ –ø–æ–∫—É–ø–∫–µ
@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def inf0_bot(message):
    await message.answer('–Ø - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é. '
                         '–Ø —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π '
                         '–ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞.\n'
                         '–Ø —Ç–∞–∫–∂–µ –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.', reply_markup=kb)

# –°–æ–∑–¥–∞–Ω–∏–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
inline_kb = InlineKeyboardMarkup()
button1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
button2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞', callback_data='formulas')
inline_kb.row(button1, button2)

@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=inline_kb)

@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('–§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞ '
                              '–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π\n –¥–ª—è –º—É–∂—á–∏–Ω:\n '
                              'Calories = 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5, \n'
                              '–¥–ª—è –∂–µ–Ω—â–∏–Ω:\n'
                              'Calories = 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161',
                              reply_markup=inline_kb)
    await call.answer()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å)
class UserStates(StatesGroup):
    age = State()
    growth = State()
    weight = State()

@dp.callback_query_handler(text='calories')
async def set_age(call):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await UserStates.age.set()
    await call.answer()

@dp.message_handler(state=UserStates.age)
async def set_growth(message, state):
    await state.update_data(–í–æ–∑—Ä–∞—Å—Ç=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:")
    await UserStates.next()

@dp.message_handler(state=UserStates.growth)
async def set_weight(message, state):
    await state.update_data(–†–æ—Å—Ç=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:")
    await UserStates.next()

@dp.message_handler(state=UserStates.weight)
async def send_calories(message, state):
    await state.update_data(–í–µ—Å=message.text)
    # –ó–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
    data = await state.get_data()

    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞ –¥–ª—è –º—É–∂—á–∏–Ω
    calories = int((10 * float(data['–í–µ—Å'])) +
                   (6.25 * float(data['–†–æ—Å—Ç'])) -
                   (5 * float(data['–í–æ–∑—Ä–∞—Å—Ç'])) + 5)

    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π - {calories} –∫–∫–∞–ª')
    await state.finish()

# –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∑–∞–¥–∞—á–∏
# –°–æ–∑–¥–∞–Ω–∏–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–µ–π; –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è
# –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é
def get_inline_products():
    inline_kb_products = InlineKeyboardMarkup()
    button3 = InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç 1', callback_data='product_buying')
    button4 = InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç 2', callback_data='product_buying')
    button5 = InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç 3', callback_data='product_buying')
    button6 = InlineKeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç 4', callback_data='product_buying')
    inline_kb_products.row(button3, button4, button5, button6)
    return inline_kb_products

#–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç.–∫. –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–∫–Ω–∫—Ü–∏—é get_all_products()
# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∫–æ—Ä—Ç–µ–∂–∏)
# products = [
#         ('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å', '77 –∫–∫–∞–ª –≤ 100 –≥ –ø—Ä–æ–¥—É–∫—Ç–∞', 2, 'files_products/prod_photo_1.png'),
#         ('–°—ã—Ä', '450 –∫–∫–∞–ª –≤ 100 –≥ –ø—Ä–æ–¥—É–∫—Ç–∞', 3, 'files_products/prod_photo_2.png'),
#         ('–ú—è—Å–æ', '150 –∫–∫–∞–ª –≤ 100 –≥ –ø—Ä–æ–¥—É–∫—Ç–∞', 4, 'files_products/prod_photo_3.png'),
#         ('–ë—Ä–æ–∫–∫–æ–ª–∏', '31 –∫–∫–∞–ª –≤ 100 –≥ –ø—Ä–æ–¥—É–∫—Ç–∞', 1, 'files_products/prod_photo_4.png')
#     ]

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å' –∏–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(text='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message):
    products = get_all_products()  # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞ crud_functions.py
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö + —Ñ–æ—Ç–æ
    list_message = '–ü—Ä–µ–¥–ª–∞–≥–∞—é –∫—É–ø–∏—Ç—å:üõí\n'
    # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≤–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫ integer
    for i in range(len(products)):
        title, description, price = products[i]
        list_message += f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title} | –û–ø–∏—Å–∞–Ω–∏–µ: {description} | –¶–µ–Ω–∞: {price * 100} |\n'
        photo_filename = f'files_products/prod_photo_{i + 1}.png'
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        await message.answer(list_message)
        list_message = ''  # –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        # –í—ã–≤–æ–¥ —Ñ–æ—Ç–æ
        with open(photo_filename, 'rb') as photo_file:
            await message.answer_photo(photo=photo_file)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=get_inline_products())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!')
    await call.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)